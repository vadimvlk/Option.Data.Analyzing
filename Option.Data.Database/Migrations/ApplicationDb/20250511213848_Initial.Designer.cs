// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Option.Data.Database;

#nullable disable

namespace Option.Data.Database.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250511213848_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Option.Data.Shared.Poco.OptionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("Id"), 1L, null, null, null, null, null);

                    b.Property<double?>("CallDelta")
                        .HasColumnType("double precision");

                    b.Property<double?>("CallGamma")
                        .HasColumnType("double precision");

                    b.Property<double>("CallOi")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double>("CallPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DeliveryPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("Expiration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Iv")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double>("MarkPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("PutDelta")
                        .HasColumnType("double precision");

                    b.Property<double?>("PutGamma")
                        .HasColumnType("double precision");

                    b.Property<double>("PutOi")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double>("PutPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<int>("Strike")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("UnderlyingPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Currency");

                    b.HasIndex("Expiration");

                    b.HasIndex("Strike");

                    b.HasIndex("Type");

                    b.HasIndex("Currency", "Type", "Strike", "Expiration");

                    b.ToTable("OptionData");
                });
#pragma warning restore 612, 618
        }
    }
}
