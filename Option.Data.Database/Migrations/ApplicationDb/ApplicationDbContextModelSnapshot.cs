// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Option.Data.Database;

#nullable disable

namespace Option.Data.Database.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Option.Data.Shared.Poco.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BTC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ETH"
                        });
                });

            modelBuilder.Entity("Option.Data.Shared.Poco.DeribitData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("DeliveryPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("Delta")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Expiration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext");

                    b.Property<double>("Gamma")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext");

                    b.Property<double>("Iv")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double>("MarkPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double>("OpenInterest")
                        .HasColumnType("double precision");

                    b.Property<int>("OptionTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Strike")
                        .HasColumnType("integer");

                    b.Property<double>("UnderlyingPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("Expiration");

                    b.HasIndex("OptionTypeId");

                    b.HasIndex("Strike");

                    b.HasIndex("CurrencyTypeId", "OptionTypeId", "Strike", "Expiration");

                    b.ToTable("DeribitData");
                });

            modelBuilder.Entity("Option.Data.Shared.Poco.OptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("OptionType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Call"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Put"
                        });
                });

            modelBuilder.Entity("Option.Data.Shared.Poco.DeribitData", b =>
                {
                    b.HasOne("Option.Data.Shared.Poco.CurrencyType", "Currency")
                        .WithMany("Options")
                        .HasForeignKey("CurrencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Option.Data.Shared.Poco.OptionType", "Type")
                        .WithMany("Options")
                        .HasForeignKey("OptionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Option.Data.Shared.Poco.CurrencyType", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Option.Data.Shared.Poco.OptionType", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
