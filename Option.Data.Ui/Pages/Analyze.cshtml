@page
@model AnalyzeModel
@using Option.Data.Ui.Services
@inject IOptionsAnalysisHtmlBuilder HtmlBuilder;
@{
    ViewData["Title"] = "Deribit Analyze Data";
}

<div class="container">
    <h1>Deribit Analyzer</h1>
    <partial name="_OptionsForm" model="Model" />
    @if (Model.ViewModel.OptionData.Any())
    {
        <h4>Options Data for @(Model.ViewModel.SelectedCurrencyId == 1 ? "BTC" : "ETH") - @Model.ViewModel.SelectedExpiration
            Underlying Price: @Model.ViewModel.UnderlyingPrice.ToString("N2")
        </h4>
        <div class="option-analysis-container mt-4">
            @Html.Raw(HtmlBuilder.CalculateCallPutRatioHtml(Model.ViewModel.OptionData))
            @Html.Raw(HtmlBuilder.AnalyzeCentersOfGravityHtml(Model.ViewModel.OptionData, Model.ViewModel.UnderlyingPrice))
            @Html.Raw(HtmlBuilder.AnalyzeGlobalSellerPositionHtml(Model.ViewModel.OptionData, Model.ViewModel.UnderlyingPrice))
            @Html.Raw(HtmlBuilder.AnalyzeOpenInterestHtml(Model.ViewModel.OptionData))
            @Html.Raw(HtmlBuilder.CalculateMaxPainHtml(Model.ViewModel.OptionData, Model.ViewModel.UnderlyingPrice))
            @Html.Raw(HtmlBuilder.CalculateProfitLossHtml(Model.ViewModel.OptionData, Model.ViewModel.UnderlyingPrice))
            @Html.Raw(HtmlBuilder.AnalyzePriceMovementPotentialHtml(Model.ViewModel.OptionData, Model.ViewModel.UnderlyingPrice))
        </div>
    }
    else
    {
        <div class="option-data-container">
            <h2>Options Data</h2>
            <p>No data available</p>
        </div>
    }
</div>

@section Scripts{
    <script>
    </script>
}